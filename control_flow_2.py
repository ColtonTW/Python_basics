# -*- coding: utf-8 -*-
"""Control_flow_2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRgn7n-OJqafzbMaQx_ra2qQO_h2jL4x

For loops
"""

## Working with iterative statement

#Print the * pattern using a for loop with range of 5

rows = 5
for i in range(1, rows+1): ## rows+1 to show that the rows should go up in steps of 1
    print('*' * i)      #i = every row

## print first numbers in fibonacci series
n=int(input("Number in Fibonacci sequence"))
a=0
b=1

for _ in range(n): ##_ because unsure of range so use (n)
    print(a, end= ' ')
    a,b = b, a+b   ### changes the values and will do so continuously due to a+b

"""While loops"""

# take number as input and print the sum of its digits
n = int(input("The number chosen is: "))

sum = 0 ### if multiplication is done use 1

while n > 0:   # creates a loop
    digit = n%10  # digit is remainder when /10
    sum += digit  # this digit is added to the OG sum
    n //=10  # this divides the number by 10 so that the next number may be accessed
print("The sum of the digits is: ", sum)

### So the % basically divides the whole thing by 10 and puts the digit as the remainder e.g for 34 it would be 4
# this is then added to the sum variable
# the // then moves all the numbers one towards the decimal point
#this loop repeats and the remainder will be 4
# this loop repeats until the number left is 0

# print reverse of a given number
n = int(input("Chosen number:"))

reverse = 0

while n>0:
    digit = n%10
    reverse =  reverse*10+digit ## cannot use slicing as we do not know the length of the string
    n //=10
print("The digits reversed is", reverse)

### by numltiplying the reverse by ten, it moves the previous value found to the next
# 10 space and then adds the next digit at the end.

"""Exception and handling"""

# takes two numbers as input and performs division, then handles the case where the denominator is 0

try:
    a = int(input("The first number is: "))
    b = int(input("The second number is: "))
    result = a/b
    print("Result is:", result)
except ZeroDivisionError: ### pre-made function for if dividing by 0 it will auto give an error message
    print("Error: cannot divide by 0")
## can put more except messages if needed